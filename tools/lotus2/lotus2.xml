<tool id="lotus2" name="LotuS2" version="@VERSION@+galaxy2" profile="20.01">
    <description>fast OTU processing pipeline</description>
    <macros>
        <token name="@VERSION@">2.06</token>
        <xml name="refDB_macro">
            <conditional name="refDB_cond">
                <param argument="-refDB" type="select" label="Taxonomy reference database">
                    <option value="cached">Use a built-in taxonomy database</option>
                    <option value="history">Use a taxonomy from history</option>
                </param>
                <when value="cached">
                    <param argument="ref_db" type="select" label="Using reference database" help="Select database from the list">
                        <option value="SLV" selected="true">Silva LSU (23/28S) or SSU (16/18S) (SLV)</option>
                        <option value="GG">Greengenes (GG)</option>
                        <option value="UNITE">ITS focused on fungi (UNITE)</option>
                        <option value="PR2">SSU focused on Protists (PR2)</option>
                        <option value="beetax">Bee gut specific database and tax names (beetax)</option>
                        <option value="HITdb">Human gut microbiota (HITdb)</option>
                    </param>
                    <param argument="-greengenesSpecies" type="boolean" truevalue="1" falsevalue="0" checked="false" label="Create greengenes output labels instead of OTU" />
                </when>
                <when value="history">
                    <param name="ref_fasta" type="data" format="fasta" label="Taxonomy reference sequences" help="In FASTA format" />
                    <param argument="-tax4refDB" type="data" format="tabular" label="Taxonomy reference lineages" help="Tab-separated file with 2 columns mapping each FASTA header of the reference sequences to a GTDB-style taxonomy string" />
                </when>
            </conditional>
            <param argument="-useBestBlastHitOnly" type="boolean" truevalue="1" falsevalue="0" checked="false" label="Use the best Blast hit only" help="Do not use LCA (lowest common ancestor) to determine the most likely taxonomic level (not recommended)" />
        </xml>
        <xml name="id_macro">
            <param argument="-id" type="float" min="0" max="1" value="0.97" label="Clustering threshold for OTUs" />
        </xml>
        <xml name="ITSx_macro">
            <param argument="-ITSx" type="boolean" truevalue="1" falsevalue="0" checked="true" label="Use ITSx to only retain OTUs fitting to ITS1/ITS2 hmm models" />
        </xml>
    </macros>
    <requirements>
        <requirement type="package" version="@VERSION@">lotus2</requirement>
        <requirement type="package" version="3.0">zip</requirement>
        <!-- Help conda to resolve the environment -->
        <requirement type="package" version="4.1.0">r-base</requirement>
    </requirements>
    <version_command>lotus2 --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
#import os.path
#import re
#def symlink_basename($f):
    #set fn = re.sub('[^\w\-_.]', '_', $f.element_identifier)
    #if fn.endswith('.gz'):
        #set fn = fn[:-3]
    #end if
    #for ext in ('.fq', '.fastq', '.fastqsanger'):
        #if fn.endswith($ext):
            #set fn = fn[:-len($ext)]
            #break
        #end if
    #end for
$fn#slurp
#end def

mkdir input
&&
#if $inputs.paired_or_single == 'single':
    #for f in $inputs.input:
        #set ext = $f.ext.replace('sanger', '')
        ln -s '$f' 'input/${symlink_basename(f)}.${ext}' &&
    #end for
#elif $inputs.paired_or_single == 'paired':
    #for i, f in enumerate($inputs.left_input):
        #set ext = $f.ext.replace('sanger', '')
        ln -s '$f' 'input/input${i}.1.${ext}' &&
    #end for
    #for i, f in enumerate($inputs.right_input):
        #set ext = $f.ext.replace('sanger', '')
        ln -s '$f' 'input/input${i}.2.${ext}' &&
    #end for
#else:
    #for f in $inputs.pair_input:
        #set ext = $f.forward.ext.replace('sanger', '')
        ln -s '$f.forward' 'input/${symlink_basename(f)}.1.${ext}' &&
        #set ext = $f.reverse.ext.replace('sanger', '')
        ln -s '$f.reverse' 'input/${symlink_basename(f)}.2.${ext}' &&
    #end for
#end if

#if not $map:
    lotus2 -create_map mapping.txt -i input/ &&
    cat mapping.txt &&
    #set map = 'mapping.txt'
#end if

lotus2
-i input/
-o output
-tmpDir tmp_folder
-threads "\${GALAXY_SLOTS:-1}"
-map '$map'
-platform $platform
#if $barcode:
    -barcode '$barcode'
#end if
#if $forwardPrimer:
    -forwardPrimer '$forwardPrimer'
#end if
#if $reversePrimer:
    -reversePrimer '$reversePrimer'
#end if
#if $offtarget_cond.offtargetDB != 'no':
    -offtargetDB '$offtarget_cond.ref_file'
#end if

-clustering $clu_args.clu_cond.clustering
#if $clu_args.clu_cond.clustering in ('1', '3'):
    -id $clu_args.clu_cond.id
#elif $clu_args.clu_cond.clustering == '2':
    -swarm_distance $clu_args.clu_cond.swarm_distance
#end if
#if $clu_args.derepMin:
    -derepMin '$clu_args.derepMin'
#end if
-deactivateChimeraCheck $clu_args.deactivateChimeraCheck
-chim_skew $clu_args.chim_skew

-taxAligner $tax_args.aligner_cond.taxAligner
#if $tax_args.aligner_cond.taxAligner == '0':
    -rdp_thr $tax_args.aligner_cond.rdp_thr
#elif $tax_args.aligner_cond.taxAligner == '3':
    -utax_thr $tax_args.aligner_cond.utax_thr
#else:
    #if $tax_args.aligner_cond.refDB_cond.refDB == 'cached':
        -refDB $tax_args.aligner_cond.refDB_cond.ref_db
        -greengenesSpecies $tax_args.aligner_cond.refDB_cond.greengenesSpecies
    #else:
        -refDB $tax_args.aligner_cond.refDB_cond.ref_fasta
        -tax4refDB $tax_args.aligner_cond.refDB_cond.tax4refDB
    #end if
    -useBestBlastHitOnly $tax_args.aligner_cond.useBestBlastHitOnly
#end if
-amplicon_type $tax_args.amplicon_cond.amplicon_type
#if $tax_args.amplicon_cond.amplicon_type in ('ITS', 'ITS1', 'ITS2'):
    -ITSx $tax_args.amplicon_cond.ITSx_macro
#end if
-tax_group $tax_args.tax_group
-keepUnclassified $tax_args.keepUnclassified
-useBestBlastHitOnly $tax_args.useBestBlastHitOnly
-LCA_cover $tax_args.LCA_cover
-LCA_frac $tax_args.LCA_frac
-lulu $tax_args.lulu
-buildPhylo $tax_args.buildPhylo

; EXIT_VALUE=\$? ;

zip -8 -r -v output.zip output/
&&
exit \$EXIT_VALUE
    ]]></command>

    <inputs>
        <conditional name="inputs">
            <param name="paired_or_single" type="select" label="Paired or Single-end data?">
                <option value="single" selected="true">Single-end</option>
                <option value="paired_collection">Paired-end collection</option>
            </param>
            <when value="single">
                <param name="input" type="data" format="fastqsanger,fastqsanger.gz" multiple="true" label="Single-end reads" />
            </when>
<!--
            <when value="paired">
                <param name="left_input" type="data" format="fastqsanger,fastqsanger.gz" multiple="true" label="Left/Forward strand reads" />
                <param name="right_input" type="data" format="fastqsanger,fastqsanger.gz" multiple="true" label="Right/Reverse strand reads" />
            </when>
-->
            <when value="paired_collection">
                <param name="pair_input" type="data_collection" collection_type="list:paired" format="fastqsanger,fastqsanger.gz" label="List of paired reads" />
            </when>
        </conditional>
        <param argument="-map" type="data" format="tabular" optional="true" label="Mapping file (optional)" help="Needed to demultiplex the FASTQ files using sdm. If the FASTQ are already demultiplexed, this can be omitted." />
        <param argument="-platform" type="select" label="Sequencing platform">
            <option value="miSeq" selected="true">miSeq</option>
            <option value="hiSeq">hiSeq</option>
            <option value="454">454</option>
            <option value="PacBio">PacBio</option>
        </param>
        <param argument="-barcode" type="data" format="fastqsanger" optional="true" label="Barcode (MID) sequences (optional)" help="FASTQ file with barcodes (in the processed mi/hiSeq format), if provided by the sequencer" />
        <param argument="-forwardPrimer" type="text" value="" label="Forward primer used to amplify DNA region" help="E.g. 16S primer fwd" />
        <param argument="-reversePrimer" type="text" value="" label="Reverse primer used to amplify DNA region" help="E.g. 16S primer rev" />
        <conditional name="offtarget_cond">
            <param argument="-offtargetDB" type="select" label="Remove likely contaminant OTUs/ASVs based on alignment to host genome" help="Useful for low-bacterial biomass samples to remove possible host genome contaminations">
                <option value="no" selected="true">Disabled</option>
                <option value="cached">Use a built-in genome</option>
                <option value="history">Use a genome from history</option>
            </param>
            <when value="no" />
            <when value="cached">
                <param name="ref_file" type="select" label="Using reference genome" help="Select genome from the list">
                    <options from_data_table="all_fasta">
                        <filter type="sort_by" column="2" />
                        <validator type="no_options" message="No reference genomes are available" />
                    </options>
                </param>
            </when>
            <when value="history">
                <param name="ref_file" type="data" format="fasta" label="FASTA reference genome" />
            </when>
        </conditional>
        <section name="clu_args" title="Clustering Options">
            <conditional name="clu_cond">
                <param argument="-clustering" type="select" label="Clustering algorithm">
                    <option value="1">UPARSE</option>
                    <option value="2">swarm</option>
                    <option value="3">cd-hit</option>
                    <option value="6">unoise3</option>
                    <option value="7" selected="true">dada2</option>
                </param>
                <when value="1">
                    <expand macro="id_macro" />
                </when>
                <when value="2">
                    <param argument="-swarm_distance" type="integer" min="1" value="1" label="Clustering threshold for OTUs when using swarm clustering" />
                </when>
                <when value="3">
                    <expand macro="id_macro" />
                </when>
                <when value="6">
                </when>
                <when value="7">
                </when>
            </conditional>
            <param argument="-derepMin" type="text" value="" label="Minimum size of dereplicated raw reads (optional)" help="E.g. 4:1,4:2,3:3 . See http://lotus2.earlham.ac.uk/images/Derep_options.pdf for how to specify this parameter. If not specified, LotuS2 will select an appropriate default for the chosen clustering algorithm." />
            <param argument="-deactivateChimeraCheck" type="select" label="Chimera check">
                <option value="0" selected="true">OTU chimera checks</option>
                <option value="1">No chimera check at all</option>
                <option value="2">Disable deNovo chimera check</option>
                <option value="3">Disable ref based chimera check</option>
            </param>
            <param argument="-chim_skew" type="integer" min="0" value="2" label="Skew in chimeric fragment abundance" />
        </section>
        <section name="tax_args" title="Taxonomy Options">
            <conditional name="aligner_cond">
                <param argument="-taxAligner" type="select" label="Taxonomy aligner for taxonomic profiling of OTUs">
                    <option value="0" selected="true">RDPclassifier (max likelihood)</option>
                    <option value="1">Blast LCA against custom reference database</option>
                    <option value="2">LAMBDA LCA against custom reference database</option>
                    <option value="3">UTAX likelihood corrected</option>
                    <option value="4">VSEARCH LCA against custom reference database</option>
                </param>
                <when value="0">
                    <param argument="-rdp_thr" type="float" min="0" max="1" value="0.8" label="Confidence threshold for RDP"/>
                </when>
                <when value="1">
                    <expand macro="refDB_macro" />
                </when>
                <when value="2">
                    <expand macro="refDB_macro" />
                </when>
                <when value="3">
                    <param argument="-utax_thr" type="float" min="0" max="1" value="0.8" label="Confidence threshold for UTAX"/>
                </when>
                <when value="4">
                    <expand macro="refDB_macro" />
                </when>
            </conditional>
            <conditional name="amplicon_cond">
                <param argument="-amplicon_type" type="select" label="Amplicon type">
                    <option value="LSU">LSU Large subunit (23S/28S)</option>
                    <option value="SSU" selected="true">SSU small subunit (16S/18S)</option>
                    <option value="ITS">ITS internal transcribed spacer</option>
                    <option value="ITS1">ITS1</option>
                    <option value="ITS2">ITS2</option>
                </param>
                <when value="ITS">
                    <expand macro="ITSx_macro" />
                </when>
                <when value="ITS1">
                    <expand macro="ITSx_macro" />
                </when>
                <when value="ITS2">
                    <expand macro="ITSx_macro" />
                </when>
            </conditional>
            <param argument="-tax_group" type="select" label="Tax group">
                <option value="bacteria" selected="true">bacterial 16S rDNA annnotation</option>
                <option value="fungi">fungal 18S/23S/ITS annotation</option>
            </param>
            <param argument="-keepUnclassified" type="boolean" truevalue="1" falsevalue="0" checked="true" label="Keep unclassified OTUs" help="Includes unclassified OTUs (i.e. no match in RDP/Blast database) in OTU and taxa abundance matrix calculations" />
            <param argument="-useBestBlastHitOnly" type="boolean" truevalue="1" falsevalue="0" checked="false" label="Use best blast hit only" help="If selected, do not use LCA (lowest common ancestor) to determine most likely taxonomic level (not recommended)" />
            <param argument="-LCA_cover" type="float" min="0" max="1" value="0.9" label="Minimum horizontal coverage of an OTU sequence against ref DB"/>
            <param argument="-LCA_frac" type="float" min="0" max="1" value="0.9" label="Minimum fraction of reads with identical taxonomy"/>
            <param argument="-lulu" type="boolean" truevalue="1" falsevalue="0" checked="false" label="Use LULU to merge OTUs based on their occurrence" />
            <param argument="-buildPhylo" type="select" label="Build OTU phylogeny">
                <option value="0">Disable</option>
                <option value="1" selected="true">Use fasttree2</option>
                <option value="2">Use iqtree2</option>
            </param>
        </section>
    </inputs>

    <outputs>
        <data name="otu" format="tabular" label="${tool.name} on ${on_string}: OTU abundance matrix" from_work_dir="output/OTU.txt" />
        <data name="otu_biom" format="biom1" label="${tool.name} on ${on_string}: biom-formatted OTU abundance matrix" from_work_dir="output/OTU.biom" />
        <data name="otu_fna" format="fasta" label="${tool.name} on ${on_string}: FASTA-formatted extended OTU seed sequences" from_work_dir="output/OTU.fna" />
        <data name="OTUphylo_nwk" format="newick" label="${tool.name} on ${on_string}: Newick-formatted phylogenetic tree between sequences" from_work_dir="output/OTUphylo.nwk" />
        <data name="mapping" format="tabular" label="${tool.name} on ${on_string}: mapping file" from_work_dir="output/primary/in.map" />
        <data name="runlog" format="txt" label="${tool.name} on ${on_string}: main log file" from_work_dir="output/LotuSLogS/LotuS_run.log" />
        <data name="outputs" format="zip" label="${tool.name} on ${on_string}: All output files" from_work_dir="output.zip" />
    </outputs>

    <tests>
        <test>
            <param name="paired_or_single" value="single"/>
            <param name="input" value="Anh_sample1.fastq.gz,Anh_sample2.fastq.gz" ftype="fastqsanger.gz"/>
            <param name="platform" value="454" />
            <param name="clustering" value="3" />
            <output name="otu" file="OTU.txt" compare="sim_size" />
            <output name="otu_fna" file="OTU.fna" compare="sim_size" />
            <output name="mapping" file="mapping.txt" />
        </test>
        <test>
            <param name="paired_or_single" value="single"/>
            <param name="input" value="Anh_sample1.fastq.gz,Anh_sample2.fastq.gz" ftype="fastqsanger.gz"/>
            <param name="mapping" value="mapping.txt" />
            <param name="platform" value="454" />
            <param name="clustering" value="3" />
            <output name="otu" file="OTU.txt" compare="sim_size" />
            <output name="otu_fna" file="OTU.fna" compare="sim_size" />
        </test>
    </tests>

    <help><![CDATA[
If you have separate FASTA and quality files, these can be combined in a FASTQ file using the "Combine FASTA and QUAL into FASTQ" tool.

Documentation can be found at `<http://lotus2.earlham.ac.uk/>`_.
    ]]></help>
    <citations>
        <citation type="doi">10.1186/s40168-021-01012-1</citation>
    </citations>
</tool>
